package movieList; // 같은 movieList 패키지에 서블릿을 만든다고 가정합니다.

import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

// '/movieList.do' 라는 요청을 이 서블릿이 처리하도록 설정합니다.
@WebServlet(urlPatterns = {"/movieList.do", "/movieDetail.do"})
public class MovieServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		req.setCharacterEncoding("utf-8");
		String uri = req.getRequestURI();
		String forwardPage = "/reserve.jsp";
		
		// 1. DAO 객체를 생성해서 일을 시킬 준비를 합니다.
        MovieListDAO dao = new MovieListDAO();
		
		if(uri.endsWith("/movieList.do")) {
			// 2. DAO에게 영화 목록을 가져와달라고 요청합니다.
	        List<MovieListVO> movieList = dao.getMovieList();
	        
	        // 3. DAO로부터 받은 결과(movieList)를 'request'라는 상자에 담습니다.
	        //    "movieList"라는 이름표를 붙여서 담아두면, JSP에서 이 이름표로 데이터를 꺼내 쓸 수 있어요.
	        req.setAttribute("movieList", movieList);
		}
		
		if(uri.endsWith("/movieDetail.do")) {
			// 2. DAO에게 TOP 10 영화 목록을 가져와달라고 요청합니다.
	        List<MovieListVO> movieList = dao.getTop10Movies(); // 메소드 변경

	        // 확인용 로그 추가
	        if (movieList != null && !movieList.isEmpty()) {
	            System.out.println("서블릿: DB에서 TOP 10 영화 " + movieList.size() + "개의 정보를 가져왔습니다.");
	            System.out.println("첫 번째 영화 제목: " + movieList.get(0).getMovieTitle());
	            System.out.println("첫 번째 영화 포스터: " + movieList.get(0).getPoster());
	        } else {
	            System.out.println("서블릿: DB에서 영화 정보를 가져오지 못했거나, 목록이 비어있습니다. DAO를 확인해보세요.");
	        }

	        // 3. JSP에서 사용할 수 있도록 request 객체에 "movieList"라는 이름으로 데이터를 담습니다.
	        req.setAttribute("movieList", movieList);
	        forwardPage = "/movie.jsp";
		}
        
        // 4. 결과를 보여줄 movie.jsp 페이지로 요청과 응답 객체를 전달(forward)합니다.
		req.getRequestDispatcher(forwardPage).forward(req, resp);
    }
}
	